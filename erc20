pragma solidity ^0.4.24;
 
contract SafeMath {

    function safeAdd(uint a, uint b) public pure returns (uint c) {
        c = a + b;
        require(c >= a);
    }

    function safeSub(uint a, uint b) public pure returns (uint c) {
        require(b <= a);
        c = a - b;
    }

    function safeMul(uint a, uint b) public pure returns (uint c) {
        c = a * b;
        require(a == 0 || c / a == b);
    }

    function safeDiv(uint a, uint b) public pure returns (uint c) {
        require(b > 0);
        c = a / b;
    }
}
 
contract ERC20Interface {

    function totalSupply() public constant returns (uint);
    
    function balanceOf(address tokenOwner) public constant returns (uint balance);
    
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
    
    function transfer(address to, uint tokens) public returns (bool success);
    
    function approve(address spender, uint tokens) public returns (bool success);
    
    function transferFrom(address from, address to, uint tokens) public returns (bool success);
    
    event Transfer(address indexed from, address indexed to, uint tokens);
    
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}
 
contract ApproveAndCallFallBack {

    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
}
 
contract swanson is ERC20Interface, SafeMath {

    string public symbol;
    string public  name;
    uint8 public decimals;
    uint public _totalSupply;
 
    mapping(address => uint) balances;
    mapping(address => mapping(address => uint)) allowed;
 
    constructor() public {
    
        symbol = "NS";
        name = "swanson";
        decimals = 2;
        _totalSupply = 100000;
        balances[0xEFbB0E2E077AcB6F73ca443176CE02441AF0EA8A] = _totalSupply;
        emit Transfer(address(0), 0xEFbB0E2E077AcB6F73ca443176CE02441AF0EA8A, _totalSupply);
    }
 
    function totalSupply() public constant returns (uint) {
    
        return _totalSupply  - balances[address(0)];
    }
 
    function balanceOf(address tokenOwner) public constant returns (uint balance) {
    
        return balances[tokenOwner];
    }
 
    function transfer(address to, uint tokens) public returns (bool success) {
    
        balances[msg.sender] = safeSub(balances[msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        emit Transfer(msg.sender, to, tokens);
        return true;
    }
 
    function approve(address spender, uint tokens) public returns (bool success) {
    
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }
 
    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
    
        balances[from] = safeSub(balances[from], tokens);
        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);
        emit Transfer(from, to, tokens);
        return true;
    }
    
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
    
        return allowed[tokenOwner][spender];
    }
    
    // my added 'mint' function
    
    function mintToken(address tokenOwner, uint256 tokens) internal virtual {

        beforeTransfer(address(0), tokenOwner, tokens);

        _totalSupply += tokens;
        balances[tokenOwner] += tokens;
        emit Transfer(address(0), tokenOwner, tokens);

        afterTransfer(address(0), tokenOwner, tokens);
    } 
     
    // my added 'burn' function
  
    function burnToken(address tokenOwner, uint256 tokens) internal virtual {

        beforeTransfer(tokenOwner, address(0), tokens);

        uint256 accountBalance = balances[tokenOwner];
        require(accountBalance >= tokens, "burn amount exceeds current supply");
        unchecked {
            balances[tokenOwner] = accountBalance - tokens;
        }
        _totalSupply -= tokens;

        emit Transfer(tokenOwner, address(0), tokens);

        afterTransfer(tokenOwner, address(0), tokens);
    }
    
    //  helper function for mintToken and burnToken

    function beforeTransfer(
        address from,
        address to,
        uint256 tokens
    ) internal virtual {}
    
    //  helper function for mintToken and burnToken
 
    function afterTransfer(
        address from,
        address to,
        uint256 tokens
    ) internal virtual {}
    
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
    
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);
        return true;
    }
 
    function () public payable {
    
        revert();
    }
}
